{"version":3,"sources":["Gameboard/Gameboard.js","App.js","serviceWorker.js","index.js","Gameboard/Gameboard.module.css"],"names":["Gameboard","props","gameStart","startStatus","place","current","computerAttack","enemy","randomCoordinate","id","document","querySelector","click","settings","board","map","row","cell","classes","push","styles","player","readonly","shipNumber","ship","hit","ocean","className","join","key","onClick","number","index","rotate","checked","split","x","y","attack","success","ships","console","log","updateCurrent","length","start","alert","onCellClick","shipIndex","splice","type","name","value","Ship","hitStatus","Array","from","sunkStatus","getLength","getStatus","num","every","Boolean","isSunk","createBoard","i","j","get","placeShip","count","recieveAttack","shipPieces","App","state","initialState","newAttack","bind","newShip","startGame","checkWin","reset","user","cloneDeep","this","stats","misses","hits","setState","indexOf","status","currentIndex","min","Math","ceil","max","floor","random","setComputerShips","coords","forEach","randomCoords","playerBoard","computerBoard","computer","React","Component","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.dd6a9a25.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './Gameboard.module.css';\n\nconst Gameboard = (props) => {\n  let gameStart = props.startStatus;\n  let place = props.current;\n\n  function computerAttack(enemy) {\n    const [randX, randY] = props.randomCoordinate(1);\n    const id = 'player' + randX + randY;\n    document.querySelector('#' + id).click();\n  }\n\n  const onCellClick = (id, number, index, hit) => {\n    // if game hasnt started yet and computer board is clicked\n    if (props.player === 'computer' && gameStart === false) {\n      alert('Place your ships first!');\n      return;\n    }\n\n    // if game has started and player board is clicked\n    // if (gameStart && props.player === 'player') {\n    //   return;\n    // }\n\n    let rotate = false;\n\n    // get rotate information if rotate is selected\n    if (!gameStart) {\n      let checkBox = document.querySelector('#rotate');\n      if (checkBox.checked === true) {\n        rotate = true;\n      }\n    }\n\n    // since id is the coordinates, split it in x and y values\n    id.split('');\n    let x = +id[0];\n    let y = +id[1];\n\n    // if game is in progress a click is an attack\n    if (gameStart === true) {\n      // if this is a computer attack and there is already a hit, do it again\n      if (props.player === 'player') {\n        if (hit === 1) {\n          computerAttack();\n        }\n      }\n      props.attack(x, y, number, index, props.player);\n\n      // if the cell hasn't been hit before\n      if (hit === 0 && props.player === 'computer') {\n        computerAttack();\n      }\n    } else {\n      // game is not in progress so click is place ship\n      let success = props.place(props.ships[place], x, y, rotate);\n      console.log(success);\n      // if the ship is placed sucessfully\n      if (success === true) {\n        props.updateCurrent();\n        // if game should start\n        if (place + 1 === props.ships.length && gameStart === false) {\n          props.start();\n        }\n      }\n    }\n  };\n\n  const board = props.board.map((row) => {\n    // handles the classes\n    return row.map((cell) => {\n      // classes array\n      let classes = [];\n      classes.push(styles.cell);\n      // if there is a ship in this cell\n      if (props.player === 'player' && gameStart) {\n        classes.push(styles.readonly);\n      }\n      if (cell.shipNumber !== null) {\n        if (props.player === 'player') {\n          classes.push(styles.ship);\n        }\n        // if the ship is hit\n        if (cell.hit === 1) {\n          classes.push(styles.hit);\n        }\n      } else {\n        //no ship but theres a hit\n        if (cell.hit === 1) {\n          classes.push(styles.ocean);\n        }\n      }\n      return (\n        <div\n          className={classes.join(' ')}\n          key={cell.id}\n          id={props.player + cell.id}\n          onClick={() =>\n            onCellClick(cell.id, cell.shipNumber, cell.shipIndex, cell.hit)\n          }></div>\n      );\n    });\n  });\n\n  // ship placing settings\n  let settings;\n  if (!gameStart) {\n    if (props.player === 'player') {\n      let ships = [...props.ships];\n      // show settings if gameboard is player and if ships are not completely emptied out\n      settings = (\n        <div className={styles.settings}>\n          <div>Ship Queue: {ships.splice(place)}</div>\n          <div>Current Ship Length: {props.ships[place]}</div>\n          <div className={styles.rotate}>\n            Rotate:{' '}\n            <input id=\"rotate\" type=\"checkbox\" name=\"rotate\" value=\"true\" />\n          </div>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className={styles.Gameboard}>\n      <div>{props.player + ' board'}</div>\n      <div className={styles.board}>{board}</div>\n      {settings}\n    </div>\n  );\n};\n\nexport default Gameboard;\n","import React from 'react';\nimport './App.css';\nimport Gameboard from './Gameboard/Gameboard';\nimport cloneDeep from 'lodash/cloneDeep';\n\nconst Ship = (length) => {\n  // an array with length 'length' filled with '0'\n  let hitStatus = Array.from(Array(length), () => 0);\n  let sunkStatus = false;\n\n  const getLength = () => length;\n  const getStatus = () => hitStatus;\n  // 'hit' a part of the ship, then check if all parts are hit\n  const hit = (num) => {\n    // cannot hit the same spot\n    if (hitStatus[num] === 1) {\n      return 'already damaged';\n    }\n\n    hitStatus[num] = 1;\n\n    // check if ship is completely hit\n    if (hitStatus.every(Boolean)) {\n      sunkStatus = true;\n    }\n  };\n\n  const isSunk = () => {\n    return sunkStatus ? true : false;\n  };\n  return { getLength, getStatus, hit, isSunk };\n};\n\n// ____________________________________________________ //\n\nconst createBoard = (length) => {\n  const board = [];\n  for (let i = 0; i < length; i++) {\n    board.push([]);\n    for (let j = 0; j < length; j++) {\n      board[i].push({\n        id: `${i}${j}`,\n        shipNumber: null,\n        hit: 0,\n        shipIndex: null,\n      });\n    }\n  }\n\n  const get = () => board;\n\n  const placeShip = (ship, x, y, index, rotate) => {\n    // if rotate parameter is set do this\n    if (rotate) {\n      for (let i = x, count = 0; i < x + ship.getLength(); i++, count++) {\n        // cell reference\n        let cell = board[i][y];\n\n        // set the cell data\n        cell.shipNumber = index;\n        cell.shipIndex = count;\n      }\n    } // no rotate parameter set\n    else {\n      for (let i = y, count = 0; i < y + ship.getLength(); i++, count++) {\n        // cell reference\n        let cell = board[x][i];\n\n        // set the cell data\n        cell.shipNumber = index;\n        cell.shipIndex = count;\n      }\n    }\n  };\n\n  const recieveAttack = (x, y) => {\n    if (board[x][y].hit !== 1) {\n      board[x][y].hit = 1;\n      return true;\n    }\n    return false;\n  };\n  return {\n    get,\n    placeShip,\n    recieveAttack,\n  };\n};\n\nconst shipPieces = [5, 4, 3, 3, 2];\n// ____________________________________________________ //\n\nclass App extends React.Component {\n  static initialState = {\n    player: {\n      board: createBoard(10),\n      stats: { hits: [], misses: [] },\n      ships: [],\n    },\n    computer: {\n      board: createBoard(10),\n      stats: { hits: [], misses: [] },\n      ships: [],\n    },\n    status: {\n      start: false,\n      currentIndex: 0,\n    },\n  };\n  constructor(props) {\n    super(props);\n    this.state = App.initialState;\n    this.newAttack = this.newAttack.bind(this);\n    this.newShip = this.newShip.bind(this);\n    this.updateCurrent = this.updateCurrent.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.checkWin = this.checkWin.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  newAttack(x, y, number, index, user) {\n    // clone the ships array\n    let ships = cloneDeep(this.state[user].ships);\n\n    // append to stats and handle ship hits\n    if (number === null) {\n      this.state[user].stats.misses.push({ x, y });\n\n      // tell the board that the cell has been attacked\n      this.state[user].board.recieveAttack(x, y);\n    } else {\n      ships[number].hit(index);\n      this.state[user].stats.hits.push({ x, y });\n\n      // tell the board that the cell has been attacked\n      if (this.state[user].board.recieveAttack(x, y) === true) {\n        this.checkWin(user);\n      }\n    }\n\n    // setState of ships for a rerender\n    let player = { ...this.state[user] };\n    player.ships = ships;\n    this.setState({ [user]: player });\n  }\n\n  // communicate with board API\n  newShip(length, x, y, rotate, user = 'player') {\n    let ship = Ship(length);\n    let player = this.state[user];\n    let board = player.board.get();\n\n    // check if the chosen coords are empty\n    if (rotate) {\n      for (let i = x; i < x + ship.getLength(); i++) {\n        if (!board[i] || board[i][y].shipNumber !== null) {\n          if (user === 'player') {\n            alert('Please try again! Ship cant be placed here');\n          }\n\n          return false;\n        }\n      }\n    } else {\n      for (let i = y; i < y + ship.getLength(); i++) {\n        // if the cell does not exist or a ship already exists\n        if (!board[x][i] || board[x][i].shipNumber !== null) {\n          // handle error\n          if (user === 'player') {\n            alert('Please try again! Ship cant be placed here');\n          }\n          return false;\n        }\n      }\n    }\n\n    player.ships.push(ship);\n    const index = player.ships.indexOf(ship);\n    player.board.placeShip(ship, x, y, index, rotate);\n\n    this.setState({ [user]: { ...player } });\n\n    return true;\n  }\n\n  checkWin(user) {\n    let isEveryShipSunk = this.state[user].ships.every(\n      (ship) => ship.isSunk() === true\n    );\n\n    if (isEveryShipSunk) {\n      if (user === 'computer') {\n        user = 'Player 1!';\n      } else {\n        user = 'Computer!';\n      }\n      alert('Winner: ' + user);\n      this.reset();\n    } else {\n      console.log('No winner yet');\n    }\n  }\n\n  reset() {\n    // let initState = App.initialState;\n    // initState.player.board = createBoard(10);\n    // initState.computer.board = createBoard(10);\n    // this.setState({ ...initState });\n    // this.setComputerShips();\n  }\n  startGame() {\n    let status = { ...this.state.status };\n    status.start = true;\n    this.setState({ status: status });\n  }\n\n  updateCurrent() {\n    let status = { ...this.state.status };\n    status.currentIndex++;\n    this.setState({ status: status });\n  }\n\n  // get random coords\n  randomCoords(length, rotate) {\n    let min = Math.ceil(0);\n    let max = Math.floor(9);\n    let x;\n    let y;\n\n    if (rotate) {\n      x = Math.floor(Math.random() * (max - length - min + 2)) + min;\n      y = Math.floor(Math.random() * (max - min + 1)) + min;\n    } else {\n      x = Math.floor(Math.random() * (max - min + 1)) + min;\n      y = Math.floor(Math.random() * (max - length - min + 2)) + min;\n    }\n    return [x, y];\n  }\n\n  // random ships for computer Gameboard\n  UNSAFE_componentWillMount() {\n    this.setComputerShips();\n  }\n\n  setComputerShips() {\n    // ship pieces that are valid\n    const ships = shipPieces; // [5,4,3,2,2]\n    let rotate;\n    let coords;\n    let success;\n\n    // for every ship, find it a valid place in the gameboard\n    ships.forEach((i) => {\n      success = false;\n      do {\n        rotate = Math.random() >= 0.5;\n        coords = this.randomCoords(i, rotate);\n        success = this.newShip(i, coords[0], coords[1], rotate, 'computer');\n      } while (success !== true);\n    });\n  }\n\n  render() {\n    // instead of a long variable name\n    let playerBoard = this.state.player.board;\n    let computerBoard = this.state.computer.board;\n    return (\n      <div>\n        <h1>Battleship</h1>\n        <div className=\"gameboards\">\n          <Gameboard\n            player=\"player\"\n            board={playerBoard.get()}\n            attack={this.newAttack}\n            ships={shipPieces}\n            place={this.newShip}\n            startStatus={this.state.status.start}\n            start={this.startGame}\n            current={this.state.status.currentIndex}\n            updateCurrent={this.updateCurrent}\n            randomCoordinate={this.randomCoords}\n          />\n          <Gameboard\n            player=\"computer\"\n            board={computerBoard.get()}\n            attack={this.newAttack}\n            startStatus={this.state.status.start}\n            start={this.startGame}\n            current={this.state.status.currentIndex}\n            randomCoordinate={this.randomCoords}\n          />\n        </div>\n        {/* <button onClick={this.reset}>reset</button> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Gameboard_board__1dlBo\",\"cell\":\"Gameboard_cell__2xt5C\",\"ship\":\"Gameboard_ship__2iotU\",\"hit\":\"Gameboard_hit__1YfQi\",\"ocean\":\"Gameboard_ocean__DPWwg\",\"Gameboard\":\"Gameboard_Gameboard__30J8c\",\"readonly\":\"Gameboard_readonly__Cv31M\",\"settings\":\"Gameboard_settings__VKzla\",\"rotate\":\"Gameboard_rotate__3NMT5\"};"],"sourceRoot":""}